{"version":3,"file":"static/js/885.e55a5b17.chunk.js","mappings":"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","sources":["page/Auth/Register/Register.jsx","../node_modules/rc-checkbox/es/index.js"],"sourcesContent":["import { Button, Form, Input, Radio } from 'antd';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../form.scss';\r\nconst Register = () => {\r\n    const [value, setValue] = useState(null);\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-page\">\r\n            <div className=\"login-box\">\r\n                <div className=\"illustration-wrapper\">\r\n                    <img\r\n                        src=\"https://lp-cms-production.imgix.net/2021-02/Saud_Beach_G.jpg?auto=format&q=75&w=1920\"\r\n                        alt=\"register\"\r\n                    />\r\n                </div>\r\n                <Form\r\n                    labelCol={{\r\n                        span: 6,\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 18,\r\n                    }}\r\n                    name=\"login-form\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                >\r\n                    <p className=\"form-title\">Đăng kí tài khoản</p>\r\n                    {/* <Form.Item\r\n                        name=\"use\"\r\n                        rules={[{ required: true, message: 'Vui lòng chọn loại thành viên!' }]}\r\n                    >\r\n                        <div className=\"\">\r\n                            Loại thành viên <span style={{ color: 'red' }}>*</span>\r\n                        </div>\r\n                        <Radio.Group onChange={onChange} value={value}>\r\n                            <Radio value={1}>Cá nhân</Radio>\r\n                            <Radio value={2}>Doanh nghiệp</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[{ required: true, message: 'Vui lòng nhập Email hoặc số điện thoại!' }]}\r\n                    >\r\n                        <div className=\"\">\r\n                            Email/Số điện thoại <span style={{ color: 'red' }}>*</span>\r\n                        </div>\r\n\r\n                        <Input placeholder=\"Username\" />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: 'Vui lòng nhập mật khẩu!' }]}\r\n                    >\r\n                        <div className=\"\">\r\n                            Mật khẩu <span style={{ color: 'red' }}>*</span>\r\n                        </div>\r\n\r\n                        <Input.Password placeholder=\"Password\" />\r\n                    </Form.Item> */}\r\n                    <Form.Item\r\n                        name=\"agreement\"\r\n                        valuePropName=\"checked\"\r\n                        rules={[\r\n                            {\r\n                                validator: (_, value) =>\r\n                                    value\r\n                                        ? Promise.resolve()\r\n                                        : Promise.reject(new Error('Should accept agreement')),\r\n                            },\r\n                        ]}\r\n                        // {...tailFormItemLayout}\r\n                    >\r\n                        <Radio.Group onChange={onChange} value={value}>\r\n                            <Radio value={1}>Cá nhân</Radio>\r\n                            <Radio value={2}>Doanh nghiệp</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        className=\"label\"\r\n                        name=\"email\"\r\n                        label=\"Email\"\r\n                        rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'Vui lòng nhập đúng Email!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Vui lòng nhập Email!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input placeholder=\"email\" />\r\n                    </Form.Item>\r\n                    {/* <Form.Item\r\n                        name=\"email\"\r\n                        rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'Vui lòng nhập đúng Email!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Vui lòng nhập Email!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <div className=\"\">\r\n                            Email/Số điện thoại <span style={{ color: 'red' }}>*</span>\r\n                        </div>\r\n\r\n                        <Input placeholder=\"Username\" />\r\n                    </Form.Item> */}\r\n                    {/* <Form.Item\r\n                        name=\"password\"\r\n                        rules={[{ required: true, message: 'Vui lòng nhập mật khẩu!' }]}\r\n                    >\r\n                        <div className=\"\">\r\n                            Mật khẩu <span style={{ color: 'red' }}>*</span>\r\n                        </div>\r\n\r\n                        <Input.Password placeholder=\"Password\" />\r\n                    </Form.Item> */}\r\n                    <Form.Item\r\n                        className=\"label\"\r\n                        name=\"password\"\r\n                        label=\"Mật khẩu\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                        ]}\r\n                        hasFeedback\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                    {/* \r\n\r\n                    <Form.Item\r\n                        name=\"confirm\"\r\n                        label=\"Confirm Password\"\r\n                        dependencies={['password']}\r\n                        hasFeedback\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                    if (!value || getFieldValue('password') === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject(\r\n                                        new Error('The two passwords that you entered do not match!')\r\n                                    );\r\n                                },\r\n                            }),\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item> */}\r\n\r\n                    <Form.Item className=\"btn-submit\">\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            className=\"login-form-button\"\r\n                            style={{ width: '100%' }}\r\n                        >\r\n                            Đăng kí\r\n                        </Button>\r\n                    </Form.Item>\r\n                    <Form.Item name=\"Register\">\r\n                        <span>\r\n                            Bạn đã có tài khoản? <Link to={'/user/login'}>Đăng nhập</Link>\r\n                        </span>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"prefixCls\", \"className\", \"style\", \"checked\", \"disabled\", \"defaultChecked\", \"type\", \"onChange\"];\nimport * as React from 'react';\nimport { forwardRef, useImperativeHandle, useRef } from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport classNames from 'classnames';\nexport var Checkbox = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _classNames;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-checkbox' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    checked = props.checked,\n    disabled = props.disabled,\n    _props$defaultChecked = props.defaultChecked,\n    defaultChecked = _props$defaultChecked === void 0 ? false : _props$defaultChecked,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'checkbox' : _props$type,\n    onChange = props.onChange,\n    inputProps = _objectWithoutProperties(props, _excluded);\n  var inputRef = useRef(null);\n  var _useMergedState = useMergedState(defaultChecked, {\n      value: checked\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    rawValue = _useMergedState2[0],\n    setRawValue = _useMergedState2[1];\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        var _inputRef$current;\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      },\n      blur: function blur() {\n        var _inputRef$current2;\n        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();\n      },\n      input: inputRef.current\n    };\n  });\n  var classString = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-checked\"), rawValue), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _classNames));\n  var handleChange = function handleChange(e) {\n    if (disabled) {\n      return;\n    }\n    if (!('checked' in props)) {\n      setRawValue(e.target.checked);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange({\n      target: _objectSpread(_objectSpread({}, props), {}, {\n        checked: e.target.checked\n      }),\n      stopPropagation: function stopPropagation() {\n        e.stopPropagation();\n      },\n      preventDefault: function preventDefault() {\n        e.preventDefault();\n      },\n      nativeEvent: e.nativeEvent\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: classString,\n    style: style\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({}, inputProps, {\n    className: \"\".concat(prefixCls, \"-input\"),\n    ref: inputRef,\n    onChange: handleChange,\n    disabled: disabled,\n    checked: !!rawValue,\n    type: type\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-inner\")\n  }));\n});\nexport default Checkbox;"],"names":["_useState","useState","_useState2","_slicedToArray","value","setValue","_jsx","className","children","_jsxs","src","alt","Form","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","valuePropName","rules","validator","_","Promise","resolve","reject","Error","Radio","onChange","e","target","label","type","message","required","Input","placeholder","hasFeedback","Button","htmlType","style","width","Link","to","_excluded","Checkbox","forwardRef","props","ref","_classNames","_props$prefixCls","prefixCls","checked","disabled","_props$defaultChecked","defaultChecked","_props$type","inputProps","_objectWithoutProperties","inputRef","useRef","_useMergedState","useMergedState","_useMergedState2","rawValue","setRawValue","useImperativeHandle","focus","_inputRef$current","current","blur","_inputRef$current2","input","classString","classNames","_defineProperty","concat","React","_extends","_objectSpread","stopPropagation","preventDefault","nativeEvent"],"sourceRoot":""}